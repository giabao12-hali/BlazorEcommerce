@inject IProductSvc ProductSvc
@implements IDisposable

@if(ProductSvc.Products == null || ProductSvc.Products.Count == 0)
{
	<span>@ProductSvc.Message</span>
}
else
{
	<ul class="list-unstyled">
		@foreach(var product in ProductSvc.Products)
		{
			<li class="media my-3">
				<div class="media-img-wrapper mr-2">
					<a href="/product/@product.Id">
						@if (!string.IsNullOrEmpty(product.ImageUrl))
						{
							<img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
						}else if (product.Images.Count > 0)
						{
							<img class="media-img" src="@product.Images[0].Data" alt="@product.Title" />
						}
					</a>
				</div>
				<div class="media-body">
					<a href="/product/@product.Id">
						<h4 class="mb-0">@product.Title</h4>
					</a>
					<p>@product.Description</p>
					<h5 class="price">
						@GetPriceText(product)
					</h5>
				</div>
			</li>
		}
	</ul>
	@*button cho việc nhấn vào trang sẽ thay đổi page, hiện product*@
	for(var i = 1; i <= ProductSvc.PageCount; i++)
	{
		<a class="btn 
					@(i == ProductSvc.CurrentPage ? "btn-info" : "btn-outline-info")
					page-selection"
					href="/search/@ProductSvc.LastSearchText/@i">@i</a>
	}
}

@code {
	protected override void OnInitialized()
	{
		ProductSvc.ProductChanged += StateHasChanged;
	}

	public void Dispose()
	{
		ProductSvc.ProductChanged -= StateHasChanged;
	}

	private string GetPriceText(Product product)
	{
		var variants = product.Variants;
		if(variants.Count == 0)
		{
			return string.Empty;
		}
		else if(variants.Count == 1)
		{
			return $"${variants[0].Price}";
		}
		decimal minPrice = variants.Min(v => v.Price);
		return $"Starting at ${minPrice}";

	}
}