@page "/cart"
@inject ICartSvc CartSvc
@inject IOrderSvc OrderSvc

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if(cartProducts == null || cartProducts.Count == 0)
{
	<span>@message</span>
}
else if (orderPlaced)
{
	<span>Thank you for your order in our shop! You can check your orders in <a href="orders">here.</a></span>
}
else
{
	<div>
		@foreach(var product in cartProducts)
		{
			<div class="container">
				<div class="image-wrapper">
					<img src="@product.ImageUrl" class="image"/>
				</div>
				<div class="name">
					<h5><a href="/product/@product.ProductId">@product.Title</a></h5>
					<span>@product.ProductType</span><br />
					<input type="number" value="@product.Quantity"
					 @onchange="@((ChangeEventArgs args) => UpdateQuantity(args, product))"
					 class="form-control input-quantity"
					min="1" 
					onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />
					<button class="btn-delete" @onclick="@(() =>
						RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete</button>
				</div>
				<div class="cart-product-price">
					$@(product.Price * product.Quantity)
				</div>
			</div>
		}
		<div class="cart-product-price-total">
			Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity)
		</div>
	</div>

	<button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place Order</button>
}

@code {
	List<CartProductResponse> cartProducts = null;
	string message = "Loading cart...";
	bool orderPlaced = false;


	protected override async Task OnInitializedAsync()
	{
		orderPlaced = false;
		await LoadCart();
	}

	private async Task RemoveProductFromCart(int producttId, int productTypeId)
	{
		await CartSvc.RemoveProductFromCart(producttId, productTypeId);
		await LoadCart();
	}

	private async Task LoadCart()
	{
		await CartSvc.GetCartItemsCount();
		cartProducts = await CartSvc.GetCartProducts();
		if (cartProducts == null || cartProducts.Count == 0)
		{
			message = "Your cart is empty.";
		}
	}

	private async Task UpdateQuantity(ChangeEventArgs args, CartProductResponse product)
	{
		product.Quantity = int.Parse(args.Value.ToString());
		if (product.Quantity < 1)
			product.Quantity = 1;
		await CartSvc.UpdateQuantity(product);
	}

	private async Task PlaceOrder()
	{
		await OrderSvc.PlaceOrder();
		await CartSvc.GetCartItemsCount();
		orderPlaced = true;
	}
}