@page "/admin/categories"
@inject ICategorySvc CategorySvc
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<h3>Categories</h3>

<div class="header">
	<div class="col">Name</div>
	<div class="col">Url</div>
	<div class="col">Visible</div>
	<div class="col"></div>
</div>

@foreach (var category in CategorySvc.AdminCategories)
{
	@if (category.Editing)
	{
		<EditForm Model="editingCategory" OnSubmit="UpdateCategory">
			<div class="row">
				<div class="col">
					<InputText @bind-Value="editingCategory.Name" class="form-control"></InputText>
				</div>
				<div class="col">
					<InputText @bind-Value="editingCategory.Url" class="form-control"></InputText>
				</div>
				<div class="col col-visible">
					<InputCheckbox @bind-Value="editingCategory.Visible" style="transform: scale(1.5,1.5);"></InputCheckbox>
				</div>
				<div class="col">
					<button type="submit" class="btn btn-primary">
						<i class="oi oi-cloud-upload"></i>
					</button>
					<button class="btn btn-primary" @onclick="CancelEditing">
						<i class="oi oi-circle-x"></i>
					</button>
				</div>
			</div>
		</EditForm>
	}
	else
	{
		<div class="row">
			<div class="col">
				@category.Name
			</div>
			<div class="col">
				@category.Url
			</div>
			<div class="col col-visible">
				<span>@(category.Visible ? "✔️" : "")</span>
			</div>
			<div class="col">
				<button class="btn btn-primary" @onclick="(() => EditCategory(category))">
					<i class="oi oi-pencil"></i>
				</button>
				<button class="btn btn-primary" @onclick="(() => DeleteCategory(category.Id))">
					<i class="oi oi-trash"></i>
				</button>
			</div>
		</div>
	}
}
<button class="btn btn-primary" @onclick="CreateNewCategory">
	<i class="oi oi-plus"></i>&nbsp;&nbsp;&nbsp;Add new category
</button>

@code {
	Category editingCategory = null;

	protected override async Task OnInitializedAsync()
	{
		await CategorySvc.GetAdminCategories();
		CategorySvc.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		CategorySvc.OnChange -= StateHasChanged;
	}

	private void CreateNewCategory()
	{
		editingCategory = CategorySvc.CreateNewCategory();
	}

	private void EditCategory(Category category)
	{
		category.Editing = true;
		editingCategory = category;
	}

	private async Task UpdateCategory()
	{
		if (editingCategory.IsNew)
		{
			await CategorySvc.AddCategory(editingCategory);
		}
		else
		{
			await CategorySvc.UpdateCategory(editingCategory);
		}
		editingCategory = new Category();
	}

	private async Task CancelEditing()
	{
		editingCategory = new Category();
		await CategorySvc.GetAdminCategories();
	}

	private async Task DeleteCategory(int id)
	{
		await CategorySvc.DeleteCategory(id);
	}
}